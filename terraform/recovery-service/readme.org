* Recovery Service Web Server Deployment

** Prerequisites

   To start with, create a bucket to store terraform state (if it
   doesn't already exist):

   - name: iohk-ops-tfstate
   - region: US West (N. California)
   - turn on versioning

   Side note: terraform will pick credentials from
   =~/.aws/credentials= and you can switch profiles by doing:

   #+BEGIN_SRC Sh
     export AWS_PROFILE=iohk
   #+END_SRC

** Fetch deployment scripts

   Provision EC2 instance for Recovery Service using Terraform
   Fetch the necessary Terraform scripts.

   #+BEGIN_SRC sh
     export RECOVERY_SERVICE_DIR="$HOME/recovery-service"
     git clone https://github.com/input-output-hk/iohk-ops.git "$RECOVERY_SERVICE_DIR"
     cd "$RECOVERY_SERVICE_DIR"
     git checkout devops-639-recovery-service
     cd ./terraform/recovery-service
   #+END_SRC

** Install and configure terraform

   Use nix-shell to enter a shell that has terraform with AWS support.
  
   #+BEGIN_SRC sh
     nix-shell -p '(terraform_0_11.withPlugins (ps: [ ps.aws ]))' \
         -I nixpkgs=https://nixos.org/channels/nixos-unstable/nixexprs.tar.xz
   #+END_SRC

   From inside the new nix-shell, run the following:

   #+BEGIN_SRC sh
     terraform init
   #+END_SRC

** Set the workspace

   Workspaces provide namespacing for the remote state file. Set
   workspace name to either =staging= or =production=.

   #+BEGIN_SRC sh
     terraform workspace new staging
     aws s3 ls --recursive s3://iohk-ops-tfstate
     terraform workspace list
     terraform workspace select staging
   #+END_SRC

   The name of the selected workspace can be accessed with the
   =${terraform.workspace}= variable.

** Set up credentials

   Create a =terraform.tfvars= file in this directory and replace =foo=
   and =bar= with your actual AWS keys:

   #+BEGIN_SRC sh
     cat <<EOF > terraform.tfvars
     access_key = "foo"
     secret_key = "bar"
     key_name = "recovery-service"
     public_key_path = "ssh-key.pub"
     EOF
   #+END_SRC

   If you don't already have an access key and secret key, create a
   =terraform= IAM group with the =AmazonEC2FullAccess= permission, and
   a new user in that group with =Programmatic access=. After the user
   is created you'll have one chance to see the secret key. The access
   key is always accessible from the AWS console.

   Generate an SSH key that will be used to access the machine:

   #+BEGIN_SRC sh
     ssh-keygen -f ssh-key -N "" -C recovery_service_terraform
   #+END_SRC

   Start =ssh-agent=:

   #+BEGIN_EXAMPLE
     $ eval `ssh-agent`
     Agent pid 29074;
   #+END_EXAMPLE

   Tell ssh-agent about the new ssh key:

   #+BEGIN_SRC sh
     ssh-add ssh-key
   #+END_SRC

** Apply Terraform

   Ask Terraform to generate a plan.

   #+BEGIN_SRC sh
     terraform plan
   #+END_SRC

   Review the plan and then apply it.

   #+BEGIN_SRC sh
     terraform apply
   #+END_SRC

   If the plan executes successfully, get the instance's public IP
   address and verify you can ssh into it:

   #+BEGIN_EXAMPLE
     $ terraform show | grep 'public_ip'
       associate_public_ip_address = true
       public_ip = 13.112.163.235
     $ ssh ubuntu@13.112.163.235
   #+END_EXAMPLE

   In case you need to destroy the machine before it's actually serving
   production traffic:

   #+BEGIN_SRC sh
     terraform destroy
   #+END_SRC
